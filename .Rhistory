#Naive Bayes
sample <- sample(c(TRUE, FALSE), nrow(t.tweets), replace = TRUE, prob = c(0.2, 0.8))
#Naive Bayes
sample <- sample(c(TRUE, FALSE), nrow(t.tweets), replace = TRUE, prob = c(0.2, 0.8))
train.data <- t.tweets[sample,]
test.data <- t.tweets[-sample,]
length(test.data)
classifier = naiveBayes(train.data, as.factor(train.data[,2]) )
#Tes Validitas Naive Bayes
predicted = predict(classifier, test.data[,2]); predicted
table(test.data[, 2], predicted)
nb_classifier = naiveBayes(train.data, as.factor(train.data[,2]) )
summary(nb_classifier)
result = confusionMatrix(as.factor(test.data[, 2]), predicted)
#load dataset
trump_tweets = read.csv("C:/KULIAH/SEMESTER 5/Data Science/project akhir/Sentiment-Analysis-Impeachment-of-Donald-Trump/dataset/tweets.csv")
trump_tweets <- trump_tweets %>% select(text, klasifikasi)
#klasifikasi ke dalam matriks
t.tweets<-as.matrix(trump_tweets[trump_tweets$klasifikasi
%in% c("Positif", "Negatif", "Netral")
,])
#Naive Bayes
sample <- sample(c(TRUE, FALSE), nrow(t.tweets), replace = TRUE, prob = c(0.2, 0.8))
train.data <- t.tweets[sample,]
test.data <- t.tweets[-sample,]
length(test.data)
classifier = naiveBayes(train.data, as.factor(train.data[,2]) )
#Tes Validitas Naive Bayes
predicted = predict(classifier, test.data[,2]); predicted
table(test.data[, 2], predicted)
nb_classifier = naiveBayes(train.data, as.factor(train.data[,2]) )
summary(nb_classifier)
result = confusionMatrix(as.factor(test.data[, 2]), predicted)
(c(TRUE, FALSE), nrow(t.tweets), replace = TRUE, prob = c(0.2, 0.8))
(c(TRUE, FALSE), nrow(t.tweets), replace = TRUE, prob = c(0.2, 0.8))
(c(TRUE, FALSE), nrow(t.tweets), replace = TRUE, prob = c(0.2, 0.8))
#Naive Bayes
sample <- sample(c(TRUE, FALSE), nrow(t.tweets), replace = TRUE, prob = c(0.2, 0.8))
train.data <- t.tweets[sample,]
test.data <- t.tweets[-sample,]
length(test.data)
classifier = naiveBayes(train.data, as.factor(train.data[,2]) )
#Tes Validitas Naive Bayes
predicted = predict(classifier, test.data[,2]); predicted
table(test.data[, 2], predicted)
nb_classifier = naiveBayes(train.data, as.factor(train.data[,2]) )
summary(nb_classifier)
result = confusionMatrix(as.factor(test.data[, 2]), predicted)
read.csv
library(ggplot2)
library(shiny)
library(shinydashboard)
library(dplyr)
library(tidyverse)
library(tm)
library(wordcloud2)
library(caret)
library(RTextTools)
library(e1071)
#load dataset
trump_tweets = read.csv("C:/KULIAH/SEMESTER 5/Data Science/project akhir/Sentiment-Analysis-Impeachment-of-Donald-Trump/dataset/tweets.csv")
trump_tweets <- trump_tweets %>% select(text, klasifikasi)
#klasifikasi ke dalam matriks
t.tweets<-as.matrix(trump_tweets[trump_tweets$klasifikasi
%in% c("Positif", "Negatif", "Netral")
,])
#Naive Bayes
sample <- sample(c(TRUE, FALSE), nrow(t.tweets), replace = TRUE, prob = c(0.2, 0.8))
train.data <- t.tweets[sample,]
test.data <- t.tweets[-sample,]
length(test.data)
classifier = naiveBayes(train.data, as.factor(train.data[,2]) )
#Tes Validitas Naive Bayes
predicted = predict(classifier, test.data[,2]); predicted
table(test.data[, 2], predicted)
nb_classifier = naiveBayes(train.data, as.factor(train.data[,2]) )
summary(nb_classifier)
result = confusionMatrix(as.factor(test.data[, 2]), predicted)
result
runApp()
library(ggplot2)
library(shiny)
library(shinydashboard)
library(dplyr)
library(tidyverse)
library(tm)
library(wordcloud2)
library(caret)
library(RTextTools)
library(e1071)
#load dataset
trump_tweets = read.csv("C:/KULIAH/SEMESTER 5/Data Science/project akhir/Sentiment-Analysis-Impeachment-of-Donald-Trump/dataset/tweetss.csv")
#klasifikasi ke dalam matriks
t.tweets<-as.matrix(trump_tweets[trump_tweets$klasifikasi
%in% c("Positif", "Negatif", "Netral")
,])
#Naive Bayes
sample <- sample(c(TRUE, FALSE), nrow(t.tweets), replace = TRUE, prob = c(0.2, 0.8))
train.data <- t.tweets[sample,]
test.data <- t.tweets[-sample,]
length(test.data)
classifier = naiveBayes(train.data, as.factor(train.data[,2]) )
#Tes Validitas Naive Bayes
predicted = predict(classifier, test.data[,2]); predicted
table(test.data[, 2], predicted)
nb_classifier = naiveBayes(train.data, as.factor(train.data[,2]) )
summary(nb_classifier)
result = confusionMatrix(as.factor(test.data[, 2]), predicted)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(dplyr)
library(tidyverse)
library(tm)
library(wordcloud2)
library(caret)
library(RTextTools)
library(e1071)
#load dataset
trump_tweets = read.csv("C:/KULIAH/SEMESTER 5/Data Science/project akhir/Sentiment-Analysis-Impeachment-of-Donald-Trump/dataset/tweetss.csv")
trump_tweets <- trump_tweets %>% select(text, klasifikasi)
#klasifikasi ke dalam matriks
t.tweets<-as.matrix(trump_tweets[trump_tweets$klasifikasi
%in% c("Positif", "Negatif", "Netral")
,])
#Naive Bayes
sample <- sample(c(TRUE, FALSE), nrow(t.tweets), replace = TRUE, prob = c(0.2, 0.8))
train.data <- t.tweets[sample,]
test.data <- t.tweets[-sample,]
length(test.data)
classifier = naiveBayes(train.data, as.factor(train.data[,2]) )
#Tes Validitas Naive Bayes
predicted = predict(classifier, test.data[,2]); predicted
table(test.data[, 2], predicted)
nb_classifier = naiveBayes(train.data, as.factor(train.data[,2]) )
summary(nb_classifier)
result = confusionMatrix(as.factor(test.data[, 2]), predicted)
result
#Build a term-document matrix
komen <- trump_tweets$text
komenc <- Corpus(VectorSource(komen))
{
dtm <- TermDocumentMatrix(komenc)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
a <- data.frame(word = names(v),freq=v)
}
head(a,n=100)
a
ui <- dashboardPage( skin = "blue",
dashboardHeader(title = "Pilihan"),
dashboardSidebar(
sidebarMenu(
menuItem("Naive Bayes", tabName = "tablee", icon = icon("car")),
menuItem("term document matrix", tabName = "resultt", icon = icon("car")),
menuItem("Wordcloud", tabName = "Wordcloud", icon = icon("car")),
menuItem("Frequent Word", tabName = "FrequentWord", icon = icon("car"))
# menuItem("Sentimen Analisis", tabName = "SentimenAnalisis", icon = icon("tree"))
)
),
dashboardBody(
tabItems(
tabItem("tablee",
fluidPage(
h1("Naive Bayes")
),
tableOutput("tableee")
),
tabItem("resultt",
fluidPage(
h1("term document matrix")
),
verbatimTextOutput("resulttt")
),
tabItem("SentimenAnalisis",
fluidPage(
h1("Analisis Sentiment")
),
plotOutput("correlation")
),
tabItem("Wordcloud",
fluidPage(
h1("WordCloud")
),
wordcloud2Output("wcplot")
),
tabItem("FrequentWord",
fluidPage(
h1("Frequent Word"),
),
box(plotOutput("FrequentWord"), width = 500)
)
)
)
)
server <- function(input,output) {
#Tes Validitas Naive Bayes
output$tableee <- renderTable({
predicted = predict(classifier, test.data[,1]); predicted
table(test.data[, 2], predicted)
})
#result
#Build a term-document matrix
output$resulttt <- renderPrint({
nb_classifier = naiveBayes(train.data, as.factor(train.data[,2]) )
summary(nb_classifier)
result = confusionMatrix(as.factor(test.data[, 2]), predicted)
result
})
#Barplot Sentimen Analisis
# output$correlation <- renderPlot({
#   barplot(klas$freq, main = "Analisis Sentimen", xlab = "Jenis Sentimen",
#           ylab = "Jumlah Sentimen", names.arg = klas$x, col = c("red", "lightblue", "lightgreen"))
# })
#wordcloud
output$wcplot <- renderWordcloud2({
wordcloud2(a,shape = "star",
backgroundColor = "white",
color = 'random-light' ,size = 0.3)
})
#Barplot word Analisis
output$FrequentWord <- renderPlot({
barplot(a[1:10,]$freq, las = 2, names.arg = a[1:10,]$word,
col ="lightgreen", main ="Most frequent words",
ylab = "Word frequencies")
})
}
shinyApp(ui, server)
library(ggplot2)
library(shiny)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(dplyr)
library(tidyverse)
library(tm)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(dplyr)
library(tidyverse)
library(tm)
library(wordcloud2)
library(tm)
library(wordcloud2)
library(caret)
library(caret)
library(RTextTools)
library(e1071)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(dplyr)
library(tidyverse)
library(tm)
library(wordcloud2)
library(caret)
library(RTextTools)
library(e1071)
#load dataset
trump_tweets = read.csv("C:/KULIAH/SEMESTER 5/Data Science/project akhir/Project-Akhir-sentimen-analisis-southgate/dataset/tweetss.csv")
trump_tweets <- trump_tweets %>% select(text, klasifikasi)
#klasifikasi ke dalam matriks
t.tweets<-as.matrix(trump_tweets[trump_tweets$klasifikasi
%in% c("Positif", "Negatif", "Netral")
,])
#Naive Bayes
sample <- sample(c(TRUE, FALSE), nrow(t.tweets), replace = TRUE, prob = c(0.2, 0.8))
train.data <- t.tweets[sample,]
test.data <- t.tweets[-sample,]
length(test.data)
classifier = naiveBayes(train.data, as.factor(train.data[,2]) )
#Tes Validitas Naive Bayes
predicted = predict(classifier, test.data[,2]); predicted
table(test.data[, 2], predicted)
nb_classifier = naiveBayes(train.data, as.factor(train.data[,2]) )
summary(nb_classifier)
result = confusionMatrix(as.factor(test.data[, 2]), predicted)
result
#Build a term-document matrix
komen <- trump_tweets$text
komenc <- Corpus(VectorSource(komen))
{
dtm <- TermDocumentMatrix(komenc)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
a <- data.frame(word = names(v),freq=v)
}
head(a,n=100)
a
ui <- dashboardPage( skin = "blue",
dashboardHeader(title = "Pilihan"),
dashboardSidebar(
sidebarMenu(
menuItem("Naive Bayes", tabName = "tablee", icon = icon("car")),
menuItem("term document matrix", tabName = "resultt", icon = icon("car")),
menuItem("Wordcloud", tabName = "Wordcloud", icon = icon("car")),
menuItem("Frequent Word", tabName = "FrequentWord", icon = icon("car"))
# menuItem("Sentimen Analisis", tabName = "SentimenAnalisis", icon = icon("tree"))
)
),
dashboardBody(
tabItems(
tabItem("tablee",
fluidPage(
h1("Naive Bayes")
),
tableOutput("tableee")
),
tabItem("resultt",
fluidPage(
h1("term document matrix")
),
verbatimTextOutput("resulttt")
),
tabItem("SentimenAnalisis",
fluidPage(
h1("Analisis Sentiment")
),
plotOutput("correlation")
),
tabItem("Wordcloud",
fluidPage(
h1("WordCloud")
),
wordcloud2Output("wcplot")
),
tabItem("FrequentWord",
fluidPage(
h1("Frequent Word"),
),
box(plotOutput("FrequentWord"), width = 500)
)
)
)
)
server <- function(input,output) {
#Tes Validitas Naive Bayes
output$tableee <- renderTable({
predicted = predict(classifier, test.data[,1]); predicted
table(test.data[, 2], predicted)
})
#result
#Build a term-document matrix
output$resulttt <- renderPrint({
nb_classifier = naiveBayes(train.data, as.factor(train.data[,2]) )
summary(nb_classifier)
result = confusionMatrix(as.factor(test.data[, 2]), predicted)
result
})
#Barplot Sentimen Analisis
# output$correlation <- renderPlot({
#   barplot(klas$freq, main = "Analisis Sentimen", xlab = "Jenis Sentimen",
#           ylab = "Jumlah Sentimen", names.arg = klas$x, col = c("red", "lightblue", "lightgreen"))
# })
#wordcloud
output$wcplot <- renderWordcloud2({
wordcloud2(a,shape = "star",
backgroundColor = "white",
color = 'random-light' ,size = 0.3)
})
#Barplot word Analisis
output$FrequentWord <- renderPlot({
barplot(a[1:10,]$freq, las = 2, names.arg = a[1:10,]$word,
col ="lightgreen", main ="Most frequent words",
ylab = "Word frequencies")
})
}
shinyApp(ui, server)
library(ggplot2)
library(ggplot2)
library(shiny)
library(shiny)
library(shinydashboard)
library(shinydashboard)
library(dplyr)
library(dplyr)
library(tidyverse)
library(tm)
library(tm)
library(wordcloud2)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(dplyr)
library(tidyverse)
library(tm)
library(wordcloud2)
library(caret)
library(caret)
library(RTextTools)
library(ggplot2)
library(shiny)
library(shiny)
library(shinydashboard)
library(dplyr)
library(tidyverse)
library(tm)
library(wordcloud2)
library(caret)
library(RTextTools)
library(e1071)
#load dataset
south_tweets = read.csv("C:/KULIAH/SEMESTER 5/Data Science/project akhir/Project-Akhir-sentimen-analisis-southgate/dataset/tweetss.csv")
south_tweets <- south_tweets %>% select(text, klasifikasi)
#klasifikasi ke dalam matriks
s.tweets<-as.matrix(south_tweets[south_tweets$klasifikasi
%in% c("Positif", "Negatif", "Netral")
,])
#Naive Bayes
sample <- sample(c(TRUE, FALSE), nrow(s.tweets), replace = TRUE, prob = c(0.2, 0.8))
train.data <- s.tweets[sample,]
test.data <- s.tweets[-sample,]
length(test.data)
classifier = naiveBayes(train.data, as.factor(train.data[,2]) )
#Tes Validitas Naive Bayes
predicted = predict(classifier, test.data[,2]); predicted
table(test.data[, 2], predicted)
nb_classifier = naiveBayes(train.data, as.factor(train.data[,2]) )
summary(nb_classifier)
result = confusionMatrix(as.factor(test.data[, 2]), predicted)
result
#Build a term-document matrix
komen <- south_tweets$text
komenc <- Corpus(VectorSource(komen))
{
dtm <- TermDocumentMatrix(komenc)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
a <- data.frame(word = names(v),freq=v)
}
head(a,n=100)
a
ui <- dashboardPage( skin = "blue",
dashboardHeader(title = "Pilihan"),
dashboardSidebar(
sidebarMenu(
menuItem("Naive Bayes", tabName = "tablee", icon = icon("car")),
menuItem("term document matrix", tabName = "resultt", icon = icon("car")),
menuItem("Wordcloud", tabName = "Wordcloud", icon = icon("car")),
menuItem("Frequent Word", tabName = "FrequentWord", icon = icon("car"))
# menuItem("Sentimen Analisis", tabName = "SentimenAnalisis", icon = icon("tree"))
)
),
dashboardBody(
tabItems(
tabItem("tablee",
fluidPage(
h1("Naive Bayes")
),
tableOutput("tableee")
),
tabItem("resultt",
fluidPage(
h1("term document matrix")
),
verbatimTextOutput("resulttt")
),
tabItem("SentimenAnalisis",
fluidPage(
h1("Analisis Sentiment")
),
plotOutput("correlation")
),
tabItem("Wordcloud",
fluidPage(
h1("WordCloud")
),
wordcloud2Output("wcplot")
),
tabItem("FrequentWord",
fluidPage(
h1("Frequent Word"),
),
box(plotOutput("FrequentWord"), width = 500)
)
)
)
)
server <- function(input,output) {
#Tes Validitas Naive Bayes
output$tableee <- renderTable({
predicted = predict(classifier, test.data[,1]); predicted
table(test.data[, 2], predicted)
})
#result
#Build a term-document matrix
output$resulttt <- renderPrint({
nb_classifier = naiveBayes(train.data, as.factor(train.data[,2]) )
summary(nb_classifier)
result = confusionMatrix(as.factor(test.data[, 2]), predicted)
result
})
#Barplot Sentimen Analisis
# output$correlation <- renderPlot({
#   barplot(klas$freq, main = "Analisis Sentimen", xlab = "Jenis Sentimen",
#           ylab = "Jumlah Sentimen", names.arg = klas$x, col = c("red", "lightblue", "lightgreen"))
# })
#wordcloud
output$wcplot <- renderWordcloud2({
wordcloud2(a,shape = "star",
backgroundColor = "white",
color = 'random-light' ,size = 0.3)
})
#Barplot word Analisis
output$FrequentWord <- renderPlot({
barplot(a[1:10,]$freq, las = 2, names.arg = a[1:10,]$word,
col ="lightgreen", main ="Most frequent words",
ylab = "Word frequencies")
})
}
shinyApp(ui, server)
